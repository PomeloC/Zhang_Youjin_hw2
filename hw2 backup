'''Question 1'''
def fibonacci (n):
    '''
    The function,fibonacci(n), calculates nth the term of the Fibonacci sequence

    parameters:
    n- a number represents nth term of fibonacci sequence
    
    returns
    the number of nth fibonacci sequence
    '''
    if n==1 or n==2:
        return 1  #set the end of recursion 
    else:
        return fibonacci(n-1)+fibonacci(n-2)#use recursion function to caculate fibonacci(n)


def index_first(n):
    '''
    The function, index_first(n), caculates the index of the first term in the 
    Fibonacci sequence to contain n digits
    
    parameters:
    n- the number of digits
    
    return
    a number that is the index of the first term in the Fibonacci sequence to contain n digits
    '''
    i=1
    j=1 #initialize two numbers of the adjacent Fibonacci sequence 
    k=1 #initialize the index of fibonacci sequence with 1
    while True: # create a loop always runnings until break
        if len(list(map(int, str(i))))==n: #as long as the number of digits is n, break the loop           
            break
        else:
            k=k+1 #every loop the index need to plus 1
            t=i
            i=j
            j=j+t #every loop i and j need to move to the next
    return k
print('the first number with 100 digits appears in %d th postion'%index_first(100))

 


question 2   
   the function is that By starting at the top of the triangle below and moving 
to adjacent numbers on the row below, and we need to find the maximum total from 
top to bottom of the triangle in file"triangle.txt"
    '''


pyramid=[[75],
         [95, 64],
         [17, 47, 82],
         [18, 35, 87, 10],
         [20,  4, 82, 47, 65],
         [19,  1, 23, 75,  3, 34],
         [88,  2, 77, 73,  7, 63, 67],
         [99, 65,  4, 28,  6, 16, 70, 92],
         [41, 41, 26, 56, 83, 40, 80, 70, 33],
         [41, 48, 72, 33, 47, 32, 37, 16, 94, 29],
         [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14],
         [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57],
         [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48],
         [63, 66,  4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31],
         [ 4, 62, 98, 27, 23,  9, 70, 98, 73, 93, 38, 53, 60,  4, 23]]


for i in range(1,len(pyramid))   :
    pyramid[i][i] +=pyramid[i-1][i-1]  

for a in range(1,len(pyramid)):
    for b in range(0, a): 
        if b<1:
                pyramid [a][b] += pyramid[a-1][b]
                
        elif a>b:
                pyramid[a][b]+=max(pyramid [a-1][b-1], pyramid [a-1][b])
        
   
                
print (max(pyramid[14][0:14]))
    


"""Question 3
The purpose of this program is to create Collatz Chain for a given integer N.
We will also find which number (N), under one thousand, produces the longest chain"""

#First we ask for the user to input a value for N

N=int(input('Guess the longest Collatz Chain by entering a value for N: '))

#Next we define a function called CollatzChain
def CollatzChain(N,count=1):    #We assign the parameter N to the functions
    while N!=1:
        print(N)
        count+=1
        if N %2==0: #This means that N is an even number since there is no remainder
            N=N//2
        else:
            N=N*3+1 #This is the formula when N is an odd number
    print(N,'\n')
    
    return count-1

def ChainLength():    
    print(CollatzChain(N))    
    if N==97:
        print('This is the longest chain under one thousand!')
    else:
        print('This is not the longest chain under one thousand. Try again.')

    
print("""
Question 4
"""

def f(n, d):
    x = n * 9
    z = x
    k = 1
    while z % d:
        z = z * 10 + x
        k += 1
    return k, z / d

print(f(555,31)) 
ChainLength())


'''QUESTION 5
In England the currency is made up of pound, £, and pence, p, and there are 
eight coins in general circulation: 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p)
then,calculates how many different ways £2 can be made using any number of coins
'''
ways = [0]*201  
ways[0] = 1  
for x in [1,2,5,10,20,50,100,200]:  
    for i in range(x, 201):  
        ways[i] += ways[i-x]  
print (ways[200]) 

'''Question 6'''								
from math import sqrt

def Isprime(n,k):
     '''
     the function, Isprime(n,k), checks whether n is prime given the scope of divisor [1,k]
     
     parameters:
     n- a number waiting to be checked whether is prime or not
     k- a number giving the divisor's scope
     
     returns:
     1- if n is prime
     0- if n is not prime
     '''
     if k == 1:# the end condition of recursion
    		return 1
     if n%k ==0:# if n could be divided by k, n is not prime
    		return 0
     else:
    		return Isprime(n,k-1)# the recursion body

def main():
     '''
     the main function is to input a number and then check it if it's prime
     '''
     number = eval(input('Please input a POSITIVE INTEGER:'))#input a number		
     K = int(sqrt(number)) #prime test divisor can only up to square root of n
     if Isprime(number,K) == 1:
         print ('%d is a prime number!' %number)  
     else:
         print('%d is NOT a prime number!' %number)	   		
main()


'''Quesiton 7'''   
def sort(list):
    '''
    the function, sort(list), accepts a list of strings and uses recursion to 
    return a sorted list. Each step should at most modify two elements of the list.

    parameters:
    list- a list of strings
    
    return
    a list of sorted strings
    '''
    tem=list[0]#initialize a temporary string which represents biggest string later
    for i in range(1,len(list)):
        if list[i]>tem:
            tem=list[i]# read the strings one by one and give the biggest one to tem
        else:
            continue
    list.remove(tem)# remove the biggest one from list
    if list==[]:
        return [tem]# recursion end condition: if only one string left, return this one-string list
    else:
        return sort(list)+[tem]# new list will be re-sorted from small to big according to the ASCII code
sort(['you','are','good','person'])

def result1(x,n):
    '''
    the function, result1, caculates the function f(x)=3.95*（x-x**2）through n times recursion
    
    parameters:
    x- a number in [0,1] as input
    n- the times of recursion 
    '''
    if n==1:
        return 3.95*(x-x**2) #the end of recursion，also is the first time to cacalute the result
    else:
        return result1(result1(x,1),n-1) # then take the value from last caculation into the next caculation
print('the result(.9,100) of function f(x)=3.95*（x-x**2）is %f' %result1(.9,100))
#the result1 is  0.3078187619897856

def result2(x,n):
    '''
    the function, result1, caculates the function f(x)=3.95*x*(1-x）through n times recursion
    
    parameters:
    x- a number in [0,1] as input
    n- the times of recursion 
    '''
    if n==1:
        return 3.95*x*(1-x) #the end of recursion，also is the first time to cacalute the result
    else:
        return result2(result2(x,1),n-1) # then take the value from last caculation into the next caculation
print('the result(.9,100) of function f(x)=3.95*x*(1-x) is %f' %result2(.9,100)) 
#the result2 is 0.9230225584410336

def result3(x,n):
    '''
    the function, result1, caculates the function f(x)=3.95*x-3.95*(x**2) through n times recursion
    
    parameters:
    x- a number in [0,1] as input
    n- the times of recursion 
    '''
    if n==1:
        return 3.95*x-3.95*(x**2) #the end of recursion，also is the first time to cacalute the result
    else:
        return result3(result3(x,1),n-1) # then take the value from last caculation into the next caculation
print('the result(.9,100) of function f(x)=3.95*x-3.95*(x**2) is %f'%result3(.9,100)) 
# the result3 is 0.28783086903250865



